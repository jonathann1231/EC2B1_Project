# -*- coding: utf-8 -*-
"""EC2B1 project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C8Kq4ZC3_nVsF89UBOlzQYUJlG8-7TzO
"""

# Importing the relevant libraries

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Loading the Excel file and choose relevant countries
# Please import the Penn Word Table 10.0 as pwt100.xlsx prior to running this code

df = pd.read_excel('pwt100.xlsx', sheet_name='Data', header = 0)
df_spain = df.loc[df["country"] == "Spain"].copy()
df_costa_rica = df.loc[df["country"]=="Costa Rica"].copy()

# A: Trend Calculation - Spain

# Trend Time Path for the Natural Log of Real GDP:
# Creating Dataframe for Y Coordinates
df_spain['ln_rgdpna'] = np.log(df_spain['rgdpna'])

# Filtering data for years before 2008
# This highlights the impact of the 2008 Financial Crisis as further discussed in the description part of the project.
df_before_2008 = df_spain[df_spain['year'] < 2008]

# Plotting Graph
xpoints = np.array(df_spain["year"])
ypoints = np.array(df_spain['ln_rgdpna'])
plt.plot(xpoints,ypoints, 'b', label = "Actual")

# Fitting a Polynomial of Degree 1 (Linear)
coefficients = np.polyfit(df_spain["year"], df_spain['ln_rgdpna'], 1)
trend_line = np.polyval(coefficients, xpoints)
plt.plot(xpoints, trend_line, '--c', label = "Trend Before 2008 (Linear)")

# Fitting a Polynomial of Degree 2 (Exponential)
coefficients_exp = np.polyfit(df_before_2008["year"], df_before_2008['ln_rgdpna'], 2)
trend_line_exp = np.polyval(coefficients_exp, xpoints)
plt.plot(xpoints, trend_line_exp, '--r', label="Trend Before 2008 (Exponential)")

# Adding Labels
plt.xlabel("Year")
plt.ylabel("ln Real GDP")
plt.title("Trend Time Path of Real GDP (Spain)")
plt.legend()

# Displaying the Graph
plt.show()



# Trend Time Path for the Natural Log of Real GDP Per Capita:
# Creating Dataframe for Y Coordinates
df_spain["gdppc"] = df_spain['rgdpna'] / df_spain['pop']
df_spain['ln_gdppc'] = np.log(df_spain['gdppc'])

# Filtering data for years before 2008
# This highlights the impact of the 2008 Financial Crisis as further discussed in the description part of the project.
df_before_2008 = df_spain[df_spain['year'] < 2008]

# Plotting Graph
xpoints_2 = np.array(df_spain["year"])
ypoints_2 = np.array(df_spain['ln_gdppc'])
plt.plot(xpoints_2,ypoints_2, 'b', label = "Actual")

# Fitting a Polynomial of Degree 1 (Linear)
coefficients_2 = np.polyfit(df_before_2008["year"], df_before_2008['ln_gdppc'], 1)
trend_line_2 = np.polyval(coefficients_2, xpoints_2)
plt.plot(xpoints_2, trend_line_2, '--c', label = "Trend Before 2008 (Linear)")

# Fitting a Polynomial of Degree 2 (Exponential)
coefficients_2_exp = np.polyfit(df_before_2008["year"], df_before_2008['ln_gdppc'], 2)
trend_line_2_exp = np.polyval(coefficients_2_exp, xpoints_2)
plt.plot(xpoints_2, trend_line_2_exp, '--r', label="Trend Before 2008 (Exponential)")

# Adding Labels
plt.xlabel("Year")
plt.ylabel("ln Real GDP per Capita")
plt.title("Trend Time Path of Real GDP per Capita (Spain)")
plt.legend()

# Displaying the Graph
plt.show()

# A: Trend Calculation - Costa Rica

# Trend Time Path for the Natural Log of Real GDP:
# Creating Dataframe for Y Coordinates
df_costa_rica['ln_rgdpna'] = np.log(df_costa_rica['rgdpna'])

# Filtering data for years before/after 1978.
# This highlights the impact of the 1978 General Election as further discussed in the description part of the project.
df_before_1978 = df_costa_rica[df_costa_rica['year'] <= 1978]
df_after_1981 = df_costa_rica[df_costa_rica['year'] >= 1981]

# Plotting Graph
xpoints = np.array(df_costa_rica["year"])
ypoints = np.array(df_costa_rica['ln_rgdpna'])
plt.plot(xpoints,ypoints, 'b', label = "Actual")

# Fitting a Polynomial of Degree 1 (Linear)
coefficients = np.polyfit(df_before_1978["year"], df_before_1978['ln_rgdpna'], 1)
trend_line = np.polyval(coefficients, xpoints)
plt.plot(xpoints, trend_line, '--c', label = "Trend Before 1978")

coefficients = np.polyfit(df_after_1981["year"], df_after_1981['ln_rgdpna'], 1)
trend_line = np.polyval(coefficients, xpoints)
plt.plot(xpoints, trend_line, '--r', label = "Trend After 1981")

# Adding Labels
plt.xlabel("Year")
plt.ylabel("ln Real GDP")
plt.title("Trend Time Path of Real GDP (Costa Rica)")
plt.legend()

# Displaying the Graph
plt.show()



# Trend Time Path for the Natural Log of Real GDP Per Capita:
# Creating Dataframe for Y Coordinates
df_costa_rica["gdppc"] = df_costa_rica['rgdpna'] / df_costa_rica['pop']
df_costa_rica['ln_gdppc'] = np.log(df_costa_rica['gdppc'])

# Filtering updated data for years before/after 1978.
# This highlights the impact of the 1978 General Election as further discussed in the description part of the project.
df_before_1978 = df_costa_rica[df_costa_rica['year'] <= 1978]
df_after_1981 = df_costa_rica[df_costa_rica['year'] >= 1981]

# Plotting Graph
xpoints_2 = np.array(df_costa_rica["year"])
ypoints_2 = np.array(df_costa_rica['ln_gdppc'])
plt.plot(xpoints_2,ypoints_2, 'b', label = "Actual")

# Fitting a Polynomial of Degree 1 (Linear)
coefficients_2 = np.polyfit(df_before_1978["year"], df_before_1978['ln_gdppc'], 1)
trend_line_2 = np.polyval(coefficients_2, xpoints_2)
plt.plot(xpoints_2, trend_line_2, '--c', label = "Trend Before 1978")

coefficients_2 = np.polyfit(df_after_1981["year"], df_after_1981['ln_gdppc'], 1)
trend_line_2 = np.polyval(coefficients_2, xpoints_2)
plt.plot(xpoints_2, trend_line_2, '--r', label = "Trend After 1981")

# Adding Labels
plt.xlabel("Year")
plt.ylabel("ln Real GDP per Capita")
plt.title("Trend Time Path of Real GDP per Capita (Costa Rica)")
plt.legend()

# Displaying the Graph
plt.show()

# B: Extract TFP Measure - Spain

# Defining Inputs
rgdpna = df_spain['rgdpna']
rnna = df_spain['rnna']
emp = df_spain['emp']
alpha = 0.3

# Calculating Total Factor Productivity (A) Using Y = A(K^alpha)(L^(1-alpha))
tfp_spain = rgdpna/((rnna**alpha)*(emp**(1-alpha)))
df_spain['tfp_spain'] = tfp_spain

# Trend Time Path for Total Factor Productivity:
# Plotting Graph
xpoints = np.array(df_spain["year"])
ypoints = tfp_spain
plt.plot(xpoints,ypoints, 'b')

# Adding Labels
plt.xlabel("Year")
plt.ylabel("Total Factor Productivity")
plt.title("Time Series of Total Factor Productivity (Spain)")

# Displaying the Graph
plt.show()

# B: Extract TFP Measure - Costa Rica

# Defining Inputs
rgdpna = df_costa_rica['rgdpna']
rnna = df_costa_rica['rnna']
emp = df_costa_rica['emp']
alpha = 0.3

# Calculating Total Factor Productivity (A) Using Y = A(K^alpha)(L^(1-alpha))
tfp_costa_rica = rgdpna/((rnna**alpha)*(emp**(1-alpha)))
df_costa_rica['tfp'] = tfp_costa_rica

# Trend Time Path for Total Factor Productivity:
# Plotting Graph
xpoints = np.array(df_costa_rica["year"])
ypoints = tfp_costa_rica
plt.plot(xpoints,ypoints, 'b')

# Adding Labels
plt.xlabel("Year")
plt.ylabel("Total Factor Productivity")
plt.title("Time Series of Total Factor Productivity (Costa Rica)")

# Displaying the Graph
plt.show()

# C: Growth Accounting - Spain

# Defining the periods
# This highlights the impact of the 2008 Financial Crisis as further discussed in the description part of the project.
periods = [
    {"years": "1950-1959", "start": 1950, "end": 1959},
    {"years": "1960-1969", "start": 1960, "end": 1969},
    {"years": "1970-1979", "start": 1970, "end": 1979},
    {"years": "1980-1989", "start": 1980, "end": 1989},
    {"years": "1990-1999", "start": 1990, "end": 1999},
    {"years": "2000-2007", "start": 2000, "end": 2007},
    {"years": "2008-2013", "start": 2008, "end": 2013},
    {"years": "2014-2019", "start": 2014, "end": 2019}
]

# Creating an empty DataFrame to store results
growth_table = pd.DataFrame(columns=['Time Period', 'Growth Y', 'Growth TFP', 'Growth Employment', 'Growth Real Net National Accounts',
                                      'Contribution of TFP', 'Contribution of Employment', 'Contribution of Real Net National Accounts'])

# Iterating over periods
data_list = []
for period in periods:
    # Filtering DataFrame for the desired time period
    df_period = df_spain[(df_spain['year'] >= period['start']) & (df_spain['year'] <= period['end'])]
    # Calculating percentage changes for each period
    pct_change_y = ((df_period['rgdpna'].iloc[-1] - df_period['rgdpna'].iloc[0]) / df_period['rgdpna'].iloc[0]) * 100
    pct_change_tfp = ((df_period['tfp_spain'].iloc[-1] - df_period['tfp_spain'].iloc[0]) / df_period['tfp_spain'].iloc[0]) * 100
    pct_change_emp = ((df_period['emp'].iloc[-1] - df_period['emp'].iloc[0]) / df_period['emp'].iloc[0]) * 100
    pct_change_rnna = ((df_period['rnna'].iloc[-1] - df_period['rnna'].iloc[0]) / df_period['rnna'].iloc[0]) * 100
    # Calculating contributions for each period
    contr_tfp = pct_change_tfp / pct_change_y
    contr_emp = (1 - alpha) * pct_change_emp / pct_change_y
    contr_rnna = alpha * pct_change_rnna / pct_change_y
    # Creating a dictionary for the current period
    data = {
        'Time Period': period['years'],
        'Growth Y': pct_change_y,
        'Growth TFP': pct_change_tfp,
        'Growth Employment': pct_change_emp,
        'Growth Real Net National Accounts': pct_change_rnna,
        'Contribution of TFP': contr_tfp,
        'Contribution of Employment': contr_emp,
        'Contribution of Real Net National Accounts': contr_rnna
    }
    data_list.append(data)

# Concatenating data from all periods into a single DataFrame
growth_table = pd.concat([pd.DataFrame(data_list[i], index=[0]) for i in range(len(data_list))], ignore_index=True)

# Setting the index to the Time Period column
growth_table.set_index('Time Period', inplace=True)

# Printing the growth table
growth_table

# C: Growth Accounting - Costa Rica

# Defining the periods
# This highlights the impact of the 1978 General Election as further discussed in the description part of the project.
periods = [
    {"years": "1950-1959", "start": 1950, "end": 1959},
    {"years": "1960-1969", "start": 1960, "end": 1969},
    {"years": "1970-1978", "start": 1970, "end": 1978},
    {"years": "1981-1990", "start": 1981, "end": 1990},
    {"years": "1991-2000", "start": 1991, "end": 2000},
    {"years": "2001-2010", "start": 2001, "end": 2010},
    {"years": "2011-2019", "start": 2011, "end": 2019}
]

# Creating an empty DataFrame to store results
growth_table = pd.DataFrame(columns=['Time Period', 'Growth Y', 'Growth TFP', 'Growth Employment', 'Growth Real Net National Accounts',
                                      'Contribution of TFP', 'Contribution of Employment', 'Contribution of Real Net National Accounts'])

# Iterating over periods
data_list = []
for period in periods:
    # Filtering DataFrame for the desired time period
    df_period = df_costa_rica[(df_costa_rica['year'] >= period['start']) & (df_costa_rica['year'] <= period['end'])]
    # Calculating percentage changes for each period
    pct_change_y = ((df_period['rgdpna'].iloc[-1] - df_period['rgdpna'].iloc[0]) / df_period['rgdpna'].iloc[0]) * 100
    pct_change_tfp = ((df_period['tfp'].iloc[-1] - df_period['tfp'].iloc[0]) / df_period['tfp'].iloc[0]) * 100
    pct_change_emp = ((df_period['emp'].iloc[-1] - df_period['emp'].iloc[0]) / df_period['emp'].iloc[0]) * 100
    pct_change_rnna = ((df_period['rnna'].iloc[-1] - df_period['rnna'].iloc[0]) / df_period['rnna'].iloc[0]) * 100
    # Calculating contributions for each period
    contr_tfp = pct_change_tfp / pct_change_y
    contr_emp = (1 - alpha) * pct_change_emp / pct_change_y
    contr_rnna = alpha * pct_change_rnna / pct_change_y
    # Creating a dictionary for the current period
    data = {
        'Time Period': period['years'],
        'Growth Y': pct_change_y,
        'Growth TFP': pct_change_tfp,
        'Growth Employment': pct_change_emp,
        'Growth Real Net National Accounts': pct_change_rnna,
        'Contribution of TFP': contr_tfp,
        'Contribution of Employment': contr_emp,
        'Contribution of Real Net National Accounts': contr_rnna
    }
    data_list.append(data)

# Concatenating data from all periods into a single DataFrame
growth_table = pd.concat([pd.DataFrame(data_list[i], index=[0]) for i in range(len(data_list))], ignore_index=True)

# Setting the index to the Time Period column
growth_table.set_index('Time Period', inplace=True)

# Printing the growth table
growth_table

# D: Labour Productivity - Spain

# Time Series for Labour Productivity
# Creating Dataframe for Y Coordinates
df_spain['l_prod'] = df_spain['rgdpna'] / df_spain['emp']

# Plotting Graph
xpoints = np.array(df_spain["year"])
ypoints = np.array(df_spain['l_prod'])
plt.plot(xpoints,ypoints, 'b')

# Adding Labels
plt.xlabel("Year")
plt.ylabel("GDP per Worker")
plt.title("Time Series of Labour Productivity (Spain)")

# Displaying the Graph
plt.show()

# D: Labour Productivity - Costa Rica

# Time Series for Labour Productivity
# Creating Dataframe for Y Coordinates
df_costa_rica['l_prod'] = df_costa_rica['rgdpna'] / df_costa_rica['emp']

# Plotting Graph
xpoints = np.array(df_costa_rica["year"])
ypoints = np.array(df_costa_rica['l_prod'])
plt.plot(xpoints,ypoints, 'b')

# Adding Labels
plt.xlabel("Year")
plt.ylabel("GDP per Worker")
plt.title("Time Series of Labour Productivity (Costa Rica)")

# Displaying the Graph
plt.show()